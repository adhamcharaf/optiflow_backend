#!/usr/bin/env python3
"""
G√©n√©rateur de donn√©es r√©alistes pour OptiFlow - Supabase
G√©n√®re 11 mois de donn√©es coh√©rentes (jan-nov 2024) pour entra√Æner l'IA
"""

import random
import math
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import logging
from dotenv import load_dotenv
import os
from supabase import create_client, Client

# Configuration
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)


class SupabaseDataGenerator:
    def __init__(self):
        """Initialise la connexion Supabase"""
        self.supabase: Client = create_client(
            os.getenv('SUPABASE_URL', 'https://odnvwmcbuoffevpgooqh.supabase.co'),
            os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbnZ3bWNidW9mZmV2cGdvb3FoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTA1NjQ3NSwiZXhwIjoyMDY0NjMyNDc1fQ.yulUrzHdi9FVBeYbVFdVjoN1Nmyx6DuHhVTYDt9lAhw')
        )
        self.products = []
        self.customers = []
        self.year = 2024
        self.batch_size = 1000
        
    def load_products(self):
        """Charge les produits existants"""
        try:
            response = self.supabase.table('products').select('*').execute()
            self.products = response.data
            logger.info(f"üì¶ {len(self.products)} produits charg√©s")
            
            # Afficher les produits
            for p in self.products:
                logger.info(f"  - {p['name']} (#{p['id']}) - {p['list_price']}‚Ç¨")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement produits: {e}")
            raise
    
    def generate_customers(self) -> List[str]:
        """G√©n√®re une liste de clients fictifs"""
        customer_names = [
            "Tech Solutions SARL", "Bureau Plus", "Mobilier Pro",
            "Entreprise Martin", "Soci√©t√© Durand", "Office Design",
            "Workspace Innovation", "Corporate Furniture", "Business Equipment",
            "Professional Supplies", "Executive Office", "Modern Workspace",
            "Digital Corp", "Innovation Hub", "StartUp Factory",
            "Business Center", "Coworking Space", "Enterprise Solutions",
            "Modern Office", "Professional Services", "Corporate Design",
            "Furniture Plus", "Office Solutions", "Workspace Design",
            "Business Furniture", "Executive Supplies", "Modern Equipment"
        ]
        return customer_names
    
    def get_seasonality_factor(self, date: datetime) -> float:
        """Facteur de saisonnalit√© pour mobilier de bureau"""
        month = date.month
        
        seasonality = {
            1: 1.2,   # Janvier : budgets nouvelle ann√©e
            2: 0.9,   # F√©vrier : calme
            3: 1.1,   # Mars : reprise
            4: 1.0,   # Avril : normal
            5: 0.8,   # Mai : ralentissement
            6: 0.7,   # Juin : pr√©-√©t√©
            7: 0.6,   # Juillet : vacances
            8: 0.5,   # Ao√ªt : creux √©t√©
            9: 1.4,   # Septembre : rentr√©e forte
            10: 1.3,  # Octobre : projets Q4
            11: 1.5,  # Novembre : fin d'ann√©e
        }
        
        base_factor = seasonality.get(month, 1.0)
        # Ajouter variabilit√© ¬±20%
        return base_factor * random.uniform(0.8, 1.2)
    
    def get_weekday_factor(self, date: datetime) -> float:
        """Facteur selon jour de la semaine"""
        weekday = date.weekday()
        factors = {
            0: 1.2,  # Lundi : fort
            1: 1.3,  # Mardi : pic
            2: 1.2,  # Mercredi : fort
            3: 1.1,  # Jeudi : bon
            4: 0.9,  # Vendredi : faible
            5: 0.3,  # Samedi : tr√®s faible
            6: 0.1   # Dimanche : quasi nul
        }
        return factors.get(weekday, 1.0)
    
    def generate_product_profile(self, product: Dict) -> Dict:
        """G√©n√®re un profil de vente pour un produit"""
        price = product['list_price']
        
        # Profil selon le prix
        if price > 500:  # Produits chers (bureaux)
            profile = {
                'avg_daily_sales': random.uniform(0.05, 0.3),
                'avg_qty_per_order': random.uniform(1, 2),
                'price_variance': 0.15,  # ¬±15%
                'stock_turnover_days': random.randint(45, 90),
                'reorder_point_ratio': 0.3,
                'max_stock_ratio': 2.0
            }
        elif price > 100:  # Prix moyen (armoires, rangements)
            profile = {
                'avg_daily_sales': random.uniform(0.2, 0.8),
                'avg_qty_per_order': random.uniform(2, 5),
                'price_variance': 0.10,
                'stock_turnover_days': random.randint(30, 60),
                'reorder_point_ratio': 0.25,
                'max_stock_ratio': 3.0
            }
        else:  # Produits bon march√© (accessoires)
            profile = {
                'avg_daily_sales': random.uniform(0.5, 2.0),
                'avg_qty_per_order': random.uniform(3, 15),
                'price_variance': 0.05,
                'stock_turnover_days': random.randint(15, 30),
                'reorder_point_ratio': 0.20,
                'max_stock_ratio': 4.0
            }
        
        # Calculer les niveaux de stock
        avg_daily_consumption = profile['avg_daily_sales'] * profile['avg_qty_per_order']
        profile['stock_min'] = math.ceil(avg_daily_consumption * profile['stock_turnover_days'] * profile['reorder_point_ratio'])
        profile['stock_max'] = math.ceil(avg_daily_consumption * profile['stock_turnover_days'] * profile['max_stock_ratio'])
        profile['stock_initial'] = random.randint(profile['stock_min'], profile['stock_max'])
        
        return profile
    
    def generate_sales_data(self) -> List[Dict]:
        """G√©n√®re les donn√©es de vente pour 11 mois"""
        logger.info("üí∞ G√©n√©ration des ventes...")
        
        sales_data = []
        customers = self.generate_customers()
        
        # Profils par produit
        product_profiles = {}
        for product in self.products:
            product_profiles[product['id']] = self.generate_product_profile(product)
        
        # G√©n√©ration jour par jour
        start_date = datetime(self.year, 1, 1)
        end_date = datetime(self.year, 11, 30)  # Jusqu'√† novembre
        current_date = start_date
        
        order_counter = 1000  # Num√©ro de commande
        
        while current_date <= end_date:
            # Facteurs multiplicateurs
            season_factor = self.get_seasonality_factor(current_date)
            weekday_factor = self.get_weekday_factor(current_date)
            
            # G√©n√©rer les ventes du jour
            daily_sales = []
            
            for product in self.products:
                profile = product_profiles[product['id']]
                
                # Probabilit√© de vente
                base_prob = profile['avg_daily_sales']
                final_prob = base_prob * season_factor * weekday_factor
                
                # D√©cider si vente aujourd'hui
                if random.random() < final_prob:
                    # Quantit√©
                    qty = max(1, int(profile['avg_qty_per_order'] * random.uniform(0.5, 2.0)))
                    
                    # Prix avec variance
                    base_price = product['list_price']
                    price_variance = profile['price_variance']
                    unit_price = base_price * random.uniform(1 - price_variance, 1 + price_variance)
                    
                    # Total et marge
                    total_amount = qty * unit_price
                    cost_price = base_price * 0.6  # Marge estim√©e 40%
                    margin = total_amount - (qty * cost_price)
                    
                    # Client
                    customer = random.choice(customers)
                    
                    # Ordre al√©atoire dans la journ√©e
                    order_time = current_date.replace(
                        hour=random.randint(8, 18),
                        minute=random.randint(0, 59)
                    )
                    
                    sale = {
                        'product_id': product['id'],
                        'odoo_order_id': f'SO{order_counter:05d}',
                        'customer_name': customer,
                        'quantity': qty,
                        'unit_price': round(unit_price, 2),
                        'total_amount': round(total_amount, 2),
                        'margin': round(margin, 2),
                        'order_date': order_time.isoformat()
                    }
                    
                    daily_sales.append(sale)
                    order_counter += 1
            
            # Ajouter les ventes du jour
            sales_data.extend(daily_sales)
            
            # Afficher progression
            if current_date.day == 1:
                logger.info(f"üìÖ {current_date.strftime('%B %Y')} - {len(sales_data)} ventes g√©n√©r√©es")
            
            current_date += timedelta(days=1)
        
        logger.info(f"‚úÖ {len(sales_data)} ventes g√©n√©r√©es pour 11 mois")
        return sales_data
    
    def generate_stock_data(self, sales_data: List[Dict]) -> List[Dict]:
        """G√©n√®re les donn√©es de stock coh√©rentes avec les ventes"""
        logger.info("üìä G√©n√©ration des stocks...")
        
        stock_data = []
        
        # Profils par produit
        product_profiles = {}
        for product in self.products:
            product_profiles[product['id']] = self.generate_product_profile(product)
        
        # Stocks initiaux (1er janvier)
        current_stocks = {}
        for product in self.products:
            profile = product_profiles[product['id']]
            current_stocks[product['id']] = profile['stock_initial']
            
            # Enregistrement stock initial
            stock_data.append({
                'product_id': product['id'],
                'odoo_product_id': product.get('odoo_id', product['id']),
                'quantity_on_hand': current_stocks[product['id']],
                'quantity_forecasted': current_stocks[product['id']],
                'quantity_incoming': 0,
                'quantity_outgoing': 0,
                'location': 'Stock Principal',
                'recorded_at': datetime(self.year, 1, 1).isoformat()
            })
        
        # Grouper les ventes par jour
        sales_by_date = {}
        for sale in sales_data:
            date_key = sale['order_date'][:10]  # YYYY-MM-DD
            if date_key not in sales_by_date:
                sales_by_date[date_key] = []
            sales_by_date[date_key].append(sale)
        
        # Simuler jour par jour
        start_date = datetime(self.year, 1, 2)  # Apr√®s le stock initial
        end_date = datetime(self.year, 11, 30)
        current_date = start_date
        
        while current_date <= end_date:
            date_key = current_date.strftime('%Y-%m-%d')
            
            # Appliquer les ventes du jour
            if date_key in sales_by_date:
                for sale in sales_by_date[date_key]:
                    product_id = sale['product_id']
                    qty_sold = sale['quantity']
                    current_stocks[product_id] -= qty_sold
            
            # R√©approvisionnement (tous les lundis)
            if current_date.weekday() == 0:  # Lundi
                for product in self.products:
                    product_id = product['id']
                    profile = product_profiles[product_id]
                    current_stock = current_stocks[product_id]
                    
                    # R√©approvisionner si sous le seuil
                    if current_stock < profile['stock_min']:
                        reorder_qty = profile['stock_max'] - current_stock
                        current_stocks[product_id] = profile['stock_max']
                        
                        # Enregistrer le r√©approvisionnement
                        stock_data.append({
                            'product_id': product_id,
                            'odoo_product_id': product.get('odoo_id', product_id),
                            'quantity_on_hand': current_stocks[product_id],
                            'quantity_forecasted': current_stocks[product_id],
                            'quantity_incoming': reorder_qty,
                            'quantity_outgoing': 0,
                            'location': 'Stock Principal',
                            'recorded_at': current_date.isoformat()
                        })
            
            # Enregistrement quotidien du stock (lundi et vendredi)
            if current_date.weekday() in [0, 4]:  # Lundi et vendredi
                for product in self.products:
                    product_id = product['id']
                    
                    # Calculer pr√©visionnel (stock - ventes pr√©vues 7 jours)
                    profile = product_profiles[product_id]
                    expected_sales_7d = profile['avg_daily_sales'] * profile['avg_qty_per_order'] * 7
                    forecasted = max(0, current_stocks[product_id] - expected_sales_7d)
                    
                    stock_data.append({
                        'product_id': product_id,
                        'odoo_product_id': product.get('odoo_id', product_id),
                        'quantity_on_hand': current_stocks[product_id],
                        'quantity_forecasted': forecasted,
                        'quantity_incoming': 0,
                        'quantity_outgoing': expected_sales_7d,
                        'location': 'Stock Principal',
                        'recorded_at': current_date.isoformat()
                    })
            
            current_date += timedelta(days=1)
        
        logger.info(f"‚úÖ {len(stock_data)} enregistrements de stock g√©n√©r√©s")
        return stock_data
    
    def insert_data_batch(self, table_name: str, data: List[Dict]):
        """Ins√®re les donn√©es par batch pour de meilleures performances"""
        logger.info(f"üíæ Insertion en base - table {table_name}...")
        
        total_inserted = 0
        for i in range(0, len(data), self.batch_size):
            batch = data[i:i+self.batch_size]
            
            try:
                response = self.supabase.table(table_name).insert(batch).execute()
                total_inserted += len(batch)
                logger.info(f"  üìù {total_inserted}/{len(data)} enregistrements ins√©r√©s")
            except Exception as e:
                logger.error(f"‚ùå Erreur insertion batch {i}-{i+len(batch)}: {e}")
                # Essayer un par un pour identifier les probl√®mes
                for item in batch:
                    try:
                        self.supabase.table(table_name).insert([item]).execute()
                        total_inserted += 1
                    except Exception as item_error:
                        logger.error(f"‚ùå Erreur item: {item_error}")
                        logger.error(f"Item probl√©matique: {item}")
        
        logger.info(f"‚úÖ {total_inserted} enregistrements ins√©r√©s dans {table_name}")
        return total_inserted
    
    def clean_existing_data(self):
        """Nettoie les donn√©es existantes (optionnel)"""
        logger.info("üßπ Nettoyage des donn√©es existantes...")
        
        try:
            # Vider les tables
            self.supabase.table('sales_history').delete().neq('id', 0).execute()
            self.supabase.table('stock_levels').delete().neq('id', 0).execute()
            logger.info("‚úÖ Tables nettoy√©es")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erreur nettoyage: {e}")
    
    def generate_all_data(self, clean_first: bool = False):
        """G√©n√®re toutes les donn√©es"""
        logger.info("üöÄ G√©n√©ration compl√®te des donn√©es OptiFlow")
        logger.info("=" * 60)
        
        # Charger les produits
        self.load_products()
        
        if not self.products:
            logger.error("‚ùå Aucun produit trouv√©")
            return
        
        # Nettoyer si demand√©
        if clean_first:
            self.clean_existing_data()
        
        # 1. G√©n√©rer les ventes
        sales_data = self.generate_sales_data()
        
        # 2. G√©n√©rer les stocks (bas√© sur les ventes)
        stock_data = self.generate_stock_data(sales_data)
        
        # 3. Ins√©rer en base
        sales_inserted = self.insert_data_batch('sales_history', sales_data)
        stock_inserted = self.insert_data_batch('stock_levels', stock_data)
        
        # 4. R√©sum√©
        logger.info("=" * 60)
        logger.info("‚úÖ G√©n√©ration termin√©e!")
        logger.info(f"üìä R√©sum√©:")
        logger.info(f"   - Produits: {len(self.products)}")
        logger.info(f"   - Ventes: {sales_inserted}")
        logger.info(f"   - Stocks: {stock_inserted}")
        logger.info(f"   - P√©riode: Jan-Nov {self.year}")
        logger.info(f"   - Volume total: {sales_inserted + stock_inserted} enregistrements")


def main():
    """Fonction principale"""
    generator = SupabaseDataGenerator()
    
    print("\nGenerateur de donnees OptiFlow pour Supabase")
    print("=" * 50)
    print("Ce script va generer:")
    print("  - ~15 000 ventes realistes (11 mois)")
    print("  - ~3 000 enregistrements de stock")
    print("  - Patterns saisonniers et coherents")
    print("  - Donnees pretes pour l'IA")
    print("\nTemps estime: 2-3 minutes")
    
    # Lancer automatiquement sans confirmation
    print("\nLancement automatique de la generation...")
    generator.generate_all_data(clean_first=True)


if __name__ == "__main__":
    main()